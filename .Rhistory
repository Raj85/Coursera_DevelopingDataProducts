getwd()
library()
v=c(1:10)
v
words=c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
words
nw=data.frame(numbers,words)
numbers=c(1:10)
nw=data.frame(numbers,words)
attributes(nw)
View(nw)
nw[2,1]
nw[2,2]
nw[8,8]
nw[8]
nw[1,8]
nw[1,2]
nw[8,1]
x=1:6
y=5:10
cbind(x,y)
Stats1.13.HW.02 <- read.delim("~/Stats1.13.HW.02.txt")
View(Stats1.13.HW.02)
install.packages("psych")
install.packages("sm")
library(psych)
library(sm)
q2 <- Stats1.13.HW.02
dim(q2)
nrow(q2)
names(q2)
mean(q2$SR)
mean(q2$SR)
sd(q2$SR)
describe(q2)
describeBy(q2, q2$condition)
var(q2$SR)
describeBy(q2, q2$time)
Post <- subset(q2, q2[, 3]=="post")
Post
describeBy(post, post$condition)
describeBy(Post, Post$condition)
pre <- subset(q2, q2[, 3]=="pre")
pre
par(mfrow = c(1,3))
hist(concussed[, 2]== "PE", xlab = "PE", main = "")
hist(concussed[, 2]== "DS", xlab = "DS", main = "")
hist(concussed[, 2]== "WM", xlab = "WM", main = "")
# Histograms of concussed group at baseline
par(mfrow = c(1,3))
hist(pre[, 2]== "PE", xlab = "PE", main = "")
hist(pre[, 2]== "DS", xlab = "DS", main = "")
hist(pre[, 2]== "WM", xlab = "WM", main = "")
View(pre)
par(mfrow = c(1,3))
hist(pre[, 2]== "PE", xlab = "PE", main = "")
hist(pre[, 2]== "DS", xlab = "DS", main = "")
hist(pre[, 2]== "WM", xlab = "WM", main = "")
?hist
a <-describeBy(Post, Post$condition)
hist(a)
plot(a)
post <- subset(q2, q2[, 3]=="post")
pre <- subset(q2, q2[, 3]=="pre")
pre.wm = subset(pre, pre$condition=="WM") AND
post.wm = subset(post, post$condition=="WM") AND
pre.pe = subset(pre, pre$condition=="PE") AND
post.pe = subset(post, post$condition=="PE") AND
pre.ds = subset(pre, pre$condition=="DS") AND
post.ds = subset(post, post$condition=="DS") AND
hist(pre.wm) AND hist(post.wm) AND
hist(pre.pe) AND hist(post.pe) AND
hist(pre.ds) AND hist(post.ds)
pre.wm = subset(pre, pre$condition=="WM")
pre.wm = subset(pre, pre$condition=="WM")
post.wm = subset(post, post$condition=="WM")
pre.pe = subset(pre, pre$condition=="PE")
post.pe = subset(post, post$condition=="PE")
pre.ds = subset(pre, pre$condition=="DS")
post.ds = subset(post, post$condition=="DS")
par(mfrow = c(2,3))
hist(pre.wm)
hist(post.wm)
hist(pre.pe)
hist(post.pe)
hist(pre.ds)
hist(post.ds)
pre.wm
hist(pre.wm$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR)
hist(post.wm$SR)
hist(pre.pe$SR)
hist(post.pe$SR)
hist(pre.ds$SR)
hist(post.ds$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=12, col="red")
hist(post.wm$SR)
hist(pre.pe$SR,breaks=12, col="red")
hist(post.pe$SR)
hist(pre.ds$SR,breaks=12, col="red")
hist(post.ds$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=100, col="red")
hist(post.wm$SR)
hist(pre.pe$SR,breaks=12, col="red")
hist(post.pe$SR)
hist(pre.ds$SR,breaks=12, col="red")
hist(post.ds$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="red")
hist(post.wm$SR)
hist(pre.pe$SR,breaks=12, col="red")
hist(post.pe$SR)
hist(pre.ds$SR,breaks=12, col="red")
hist(post.ds$SR)
hist(pre.wm$SR,breaks=20, col="red")
hist(post.wm$SR)
hist(pre.pe$SR,breaks=12, col="red")
hist(post.pe$SR)
hist(pre.ds$SR,breaks=12, col="red")
hist(post.ds$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="red")
hist(post.wm$SR)
hist(pre.pe$SR,breaks=10, col="red")
hist(post.pe$SR)
hist(pre.ds$SR,breaks=10, col="red")
hist(post.ds$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="blue")
hist(post.wm$SR)
hist(pre.pe$SR,breaks=10, col="red")
hist(post.pe$SR)
hist(pre.ds$SR,breaks=10, col="red")
hist(post.ds$SR)
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="red")
hist(post.wm$SR,breaks=10, col="green")
hist(pre.pe$SR,breaks=10, col="red")
hist(post.pe$SR,breaks=10, col="green")
hist(pre.ds$SR,breaks=10, col="red")
hist(post.ds$SR,breaks=10, col="green")
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="red",xlab = "WM", main = "")
hist(post.wm$SR,breaks=10, col="green",xlab = "WM", main = "")
hist(pre.pe$SR,breaks=10, col="red",xlab = "PE", main = "")
hist(post.pe$SR,breaks=10, col="green",xlab = "PE", main = "")
hist(pre.ds$SR,breaks=10, col="red",xlab = "DS", main = "")
hist(post.ds$SR,breaks=10, col="green",xlab = "DS", main = "")
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="red",xlab = "WM", main = "")
hist(pre.pe$SR,breaks=10, col="red",xlab = "PE", main = "")
hist(pre.ds$SR,breaks=10, col="red",xlab = "DS", main = "")
hist(post.wm$SR,breaks=10, col="green",xlab = "WM", main = "")
hist(post.pe$SR,breaks=10, col="green",xlab = "PE", main = "")
hist(post.ds$SR,breaks=10, col="green",xlab = "DS", main = "")
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=10, col="red",xlab = "WM", main = "Pre WM")
hist(pre.pe$SR,breaks=10, col="red",xlab = "PE", main = "Pre PE")
hist(pre.ds$SR,breaks=10, col="red",xlab = "DS", main = "Pre DS")
hist(post.wm$SR,breaks=10, col="green",xlab = "WM", main = "Post WM")
hist(post.pe$SR,breaks=10, col="green",xlab = "PE", main = "Post PE")
hist(post.ds$SR,breaks=10, col="green",xlab = "DS", main = "Post DS")
par(mfrow = c(2,3))
hist(pre.wm$SR,breaks=5, col="red",xlab = "WM", main = "Pre WM")
hist(pre.pe$SR,breaks=5, col="red",xlab = "PE", main = "Pre PE")
hist(pre.ds$SR,breaks=5, col="red",xlab = "DS", main = "Pre DS")
hist(post.wm$SR,breaks=5, col="green",xlab = "WM", main = "Post WM")
hist(post.pe$SR,breaks=5, col="green",xlab = "PE", main = "Post PE")
hist(post.ds$SR,breaks=5, col="green",xlab = "DS", main = "Post DS")
cog <- read.delim("~/Stats1.13.HW.03.txt")
View(cog)
install.packages("psych")
install.packages("glus")
install.packages("rgl")
install.packages("psych")
install.packages("glus")
install.packages("rgl")
library(psych)
library(gclus)
library(rgl)
library(gclus)
library(glus)
library(rgl)
View(cog)
cor(cog$S1.pre,cog$S2.pre)
round(cor(cog$S1.pre,cog$S2.pre),2)
names(cog)
round(cor(cog$V1.pre,cog$V2.pre),2)
aer <- subset(cog, cog[, 2]=="aer")
des <- subset(cog, cog[, 2]=="des")
aer <- subset(cog, cog[, 2]=="aer")
round(cor(aer$S1.pre,aer$S2.pre),2)
des <- subset(cog, cog[, 2]=="des")
round(cor(des$S1.pre,des$S2.pre),2)
round(cor(cog$S1.pre,cog$S1.post),2)
round(cor(cog$S2.pre,cog$S2.post),2)
round(cor(cog$V1.pre,cog$V2.pre),2)
round(cor(cog$V1.pre,cog$V1.post),2)
round(cor(cog$V2.pre,cog$V2.post),2)
round(cor(aer$S1.pre,aer$S1.post),2)
round(cor(aer$S2.pre,aer$S2.post),2)
round(cor(des$S1.pre,des$S1.post),2)
round(cor(des$S2.pre,des$S2.post),2)
Plot (cog$S1.pre ~ cog$S2.pre)
plot (cog$S1.pre ~ cog$S2.pre)
plot3d (cog$S1.pre ~ cog$S2.pre)
open3d()
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x,y)
plot3d(x, y, z, col=rainbow(1000))
plot3d (cog$S1.pre,cog$S2.pre)
plot3d (cog$S1.pre,cog$S2.pre, col=rainbow(1000))
plot (cog$S1.pre,cog$S2.pre)
plot (cog$V1.pre,cog$V2.pre)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
names(training)
featurePlot(x=training[,c(1:8)],
y = training$CompressiveStrength,
plot="pairs")
summary(training$age)
summary(training$Age)
cutAge <- cut2(training$age,g=12)
table(cutAge)
install.packages("Hmisc")
library("Hmisc", lib.loc="C:/Users/Rmy/Documents/R/win-library/3.1")
cutAge <- cut2(training$age,g=12)
cutAge <- cut2(training$age,g=4)
table(cutAge)
cutAge <- cut2(training$Age,g=4)
table(cutAge)
qplot(CompressiveStrength,Cement,colour=cutAge,data=training)
qplot(Cement,CompressiveStrength,colour=cutAge,data=training)
cutAge <- cut2(training$Age,g=3)
table(cutAge)
plot(Cement,CompressiveStrength,colour=cutAge,data=training)
qplot(Cement,CompressiveStrength,colour=cutAge,data=training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProc <- preProcess(training[,-9]+1),method="pca",pcaComp=2)
preProc <- preProcess(training[,-9]),method="pca",pcaComp=2)
preProc <- preProcess(training[,1:8]),method="pca",pcaComp=2)
preProc <- preProcess(training[1:8]),method="pca",pcaComp=2)
preProc <- preProcess(training[1:8]),method="pca",pcaComp=2)
preProc <- preProcess(training[,-8]),method="pca",pcaComp=2)
preProc <- preProcess(training[[1:8],-8]),method="pca",pcaComp=2)
preProc <- preProcess(training[[1:8,-8]),method="pca",pcaComp=2)
prComp <- prcomp(training)
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
featurePlot(x=training[,c(1:8)],
y = training$CompressiveStrength,
plot="pairs")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
x <- data.frame(segmentationOriginal)
train <- subset(x, Case = "Train")
View(train)
subset(x, Case = "Train")
train <- subset(x, Case = 'Train')
train <- subset(x, Case = Train)
subset(x, x$Case = Train)
subset(x, x$Case = "Train")
train <- subset(x, x$Case ="Train")
subset(x, x$Case =="Train")
subset(x, x$Case =="Train")
train <- subset(x, x$Case =="Train")
View(train)
set.seed(125)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=train)
print(modFit$finalModel)
install.packages("e1071")
library("e1071", lib.loc="C:/Users/Rmy/Documents/R/win-library/3.1")
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=train)
print(modFit$finalModel)
install.packages("rattle")
library("rattle", lib.loc="C:/Users/Rmy/Documents/R/win-library/3.1")
fancyRpartPlot(modFit$finalModel)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=train)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library("pgmm", lib.loc="C:/Users/Rmy/Documents/R/win-library/3.1")
data(olive)
olive[,-1]
View(olive)
zz = olive[,-1]
View(zz)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
modFit <- train(Area ~ .,method="rpart",data=zz)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
nd = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=nd)
View(nd)
modFit <- train(Area ~ .,method="rpart",data=zz)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
View(zz)
View(train)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=train)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
test <- subset(x, x$Case =="Test")
predict(modFit, test, type="class")
predict(modFit, test, type = "class")
predict(modFit, test, type = "raw")
q3q11 = data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, q3q11, type = "raw")
View(`q3q11`)
q3q11 = data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit, q3q11, type = "raw")
View(`q3q11`)
install.packages("tm")
install.packages("wordcloud")
library(tm)
library(wordcloud)
install.packages("RColorBrewer")
Comments <- read.table("C:/Users/Rmy/Desktop/Knime/Comments.txt", quote="\"")
View(Comments)
q1 <- Comments
ds <- DataframeSource(q1)
corp1 <- VCorpus(x=ds)
inspect(corp1)
corp1 <- tm_map(corp1, removeWords)
corp1 <- tm_map(corp1, stripWhitespace)
corp1 <- tm_map(corp1, tolower)
corp1 <- tm_map(corp1, removeNumbers)
corp1 <- tm_map(corp1, removePunctuation)
corp1 <- tm_map(corp1, PlainTextDocument)
corp1 <- tm_map(corp1,removeWords, stopwords("english"))
library(qdap)
install.packages("qdap")
library(qdap)
q1 <- Comments
ds <- DataframeSource(q1)
corp1 <- VCorpus(x=ds)
library("qdap", lib.loc="C:/Users/Rmy/Documents/R/win-library/3.1")
ds <- DataframeSource(q1)
install.packages("dplyr")
library(tm)
library(wordcloud)
library(qdap)
library("data.table", lib.loc="C:/Users/Rmy/Documents/R/win-library/3.1")
library(tm)
library(wordcloud)
library(qdap)
library(data.table)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
setwd("C:/Users/Rmy/Desktop/Coursera/Developing Data Products/Coursera_DevelopingDataProducts")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
publish(title = 'Comparison and Commonality word cloud', 'index.html', host = 'rpubs')
